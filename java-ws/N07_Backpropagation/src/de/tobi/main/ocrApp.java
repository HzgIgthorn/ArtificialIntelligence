package de.tobi.main;

import de.tobi.backprop.BackPropNetwork;
import de.tobi.backprop.Constants;

public class ocrApp implements Constants{

	public static void main(String[] args) {
		float[][] tData = new float[][]{
			new float[]{0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,1,1,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,0,0,0,0,1,1,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,},
			new float[]{0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,1,0,0,1,1,1,1,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,},
			new float[]{0,0,1,1,0,0,0,1,0,1,1,0,1,0,1,1,0,1,0,0,0,1,1,1,1,1,0,0,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,1,1,0,0,0,0,1,},
			new float[]{0,1,1,0,0,0,1,1,0,1,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,1,0,0,1,0,1,0,0,1,1,0,1,0,1,0,0,0,1,1,1,1,1,0,},
			new float[]{0,0,0,0,1,1,0,0,1,0,0,1,1,1,0,0,0,0,1,1,0,1,0,0,0,1,1,0,0,1,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,},
			new float[]{1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,0,0,0,1,1,1,1,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,},
			new float[]{0,0,1,1,1,1,0,0,0,1,1,1,0,1,1,0,1,1,0,0,0,1,1,1,1,0,0,0,0,1,0,1,1,0,1,0,0,1,0,1,1,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1,0,0,1,0,0,1,1,0,},
			new float[]{1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,1,0,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,0,0,1,0,1,1,1,0,0,0,1,1,1,0,1,0,0,0,},
			new float[]{0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,1,1,1,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,},
			new float[]{0,1,1,1,0,0,0,1,1,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,1,1,1,}
		};
			
		float[][] tRes = new float[][] {
			new float[] {0,0,0,0}, // ->  0
			new float[] {0,0,0,1}, // ->  1
			new float[] {0,0,1,0}, // ->  2
			new float[] {0,0,1,1}, // ->  3
			new float[] {0,1,0,0}, // ->  4
			new float[] {0,1,0,1}, // ->  5
			new float[] {0,1,1,0}, // ->  6
			new float[] {0,1,1,1}, // ->  7
			new float[] {1,0,0,0}, // ->  8
			new float[] {1,0,0,1}, // ->  9
		};
		
		BackPropNetwork network = new BackPropNetwork(64, 15, 4);
		
		for(int i = 0; i < ITERATIONS; i++) {
			for(int j = 0; j < tRes.length; j++) {
				network.train(tData[j], tRes[j], LEARNING_RATE, MOMENTUM);
			}
			if((i + 1) % 10000 == 0) {
				System.out.println("");
				for(int j = 0; j < tRes.length; j++) {
					float[] data = tData[j];
					float[] calcOut = network.run(data);
					System.out.println(DDF.format(calcOut[0])+" "+ DDF.format(calcOut[1])+" "+DDF.format(calcOut[2])+" "+DDF.format(calcOut[3]));
				}
			}
		}

	}

}
