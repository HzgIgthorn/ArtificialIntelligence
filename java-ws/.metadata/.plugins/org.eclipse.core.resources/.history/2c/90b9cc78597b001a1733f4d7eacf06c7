package de.tobi.depthfirstsearch;

import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Stack;

import de.tobi.breadthfirstsearch.Vertex;

public class DFS<T> {
	
	public DFS(List<Vertex<T>> vertexes) {
		vertexes.stream().filter(v -> !v.isVisited()).forEach(v -> dfs(v));
	}

	public void dfs(Vertex<T> root) {
		Stack<Vertex<T>> queue = new LinkedList<Vertex<T>>();
		root.setVisited(true);
		queue.add(root);
		
		while(!queue.isEmpty()) {
			Vertex<T> aktVertex = queue.pop();
			System.out.println("visit -> "+aktVertex);
			aktVertex.getNeighList().stream().filter(v -> !v.isVisited()).forEach(v -> {v.setVisited(true); queue.add(v);});
		}
	}

}
